<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on tech-lessons.in</title><link>/en/tags/rust/</link><description>Recent content in Rust on tech-lessons.in</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="/en/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Diving into Rust by building an assertions crate</title><link>/en/blog/diving_into_rust/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>/en/blog/diving_into_rust/</guid><description>As Rust projects grow in size and complexity, the need for sophisticated error handling tools becomes ever more pressing. Traditional methods like panics and asserts, while useful, can be limited and cumbersome.
Let&amp;rsquo;s build an assertions crate that offers elegant and powerful assertions, while simultaneously diving into the diverse landscape of Rust features.
Introduction Let&amp;rsquo;s define some requirements for our crate. The assertions crate should:
Offer Fluent API: chain assertions for a natural and readable experience.</description></item></channel></rss>