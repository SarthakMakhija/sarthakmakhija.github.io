<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LSM-Tree on tech-lessons.in</title><link>/en/tags/lsm-tree/</link><description>Recent content in LSM-Tree on tech-lessons.in</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 10 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/tags/lsm-tree/index.xml" rel="self" type="application/rss+xml"/><item><title>WiscKey: Separating Keys from Values in SSD-Conscious Storage</title><link>/en/blog/wisckey_ssd_conscious_key_value_store/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>/en/blog/wisckey_ssd_conscious_key_value_store/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Log-structured_merge-tree#:~:text=In%20computer%20science%2C%20the%20log,%2C%20maintain%20key%2Dvalue%20pairs." target="_blank" rel="noopener">LSM-tree&lt;/a>
 (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device&amp;rsquo;s sequential and random performance characteristics.&lt;/p>
&lt;/blockquote>
&lt;p>This article summarises the &lt;a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf" target="_blank" rel="noopener">WiscKey&lt;/a>
 paper published in 2016.&lt;/p>
&lt;p>Before we understand the paper, it is essential to understand the LSM-tree data structure, read and write amplification in the LSM-tree and various SSD characteristics that should be considered while building an SSD-conscious storage engine.&lt;/p></description></item></channel></rss>