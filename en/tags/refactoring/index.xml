<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on tech-lessons.in</title><link>/en/tags/refactoring/</link><description>Recent content in Refactoring on tech-lessons.in</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 24 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Code without automated tests? Are we serious?</title><link>/en/blog/code_without_tests/</link><pubDate>Fri, 24 Feb 2023 00:00:00 +0000</pubDate><guid>/en/blog/code_without_tests/</guid><description>Automated tests are an essential part of every piece of code that we write. The benefits of these tests are so compelling that it does not even make sense to think about writing code without tests or writing code today and adding tests later. Despite the benefits, we still see code without tests, we still see ideas like &amp;ldquo;writing code today and adding tests when the delivery pressure reduces&amp;rdquo; floating around.</description></item><item><title>Let’s deal with Legacy code</title><link>/en/blog/lets_deal_with_legacy_code/</link><pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate><guid>/en/blog/lets_deal_with_legacy_code/</guid><description>This article is in continuation with the previous article where we defined some key aspects of Legacy code. In this article we will learn to deal with Legacy code. Before we begin with an example, let’s take a moment to understand Broken Window Theory.
Broken Window Theory An academic theory proposed by James Q. Wilson and George Kelling in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.</description></item></channel></rss>