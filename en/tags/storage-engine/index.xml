<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Storage engine on tech-lessons.in</title><link>/en/tags/storage-engine/</link><description>Recent content in Storage engine on tech-lessons.in</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 04 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/en/tags/storage-engine/index.xml" rel="self" type="application/rss+xml"/><item><title>Bitcask - A Log-Structured Hash Table</title><link>/en/blog/bitcask/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>/en/blog/bitcask/</guid><description>Bitcask is an embeddable key/value storage engine that is defined as a &amp;ldquo;Log-Structured Hash Table&amp;rdquo; in the paper that introduced it. Bitcask follows a simple model: all the key/value pairs are written to append-only files, and an in-memory data structure contains a mapping between each key and the position of the value in the data file.
Let&amp;rsquo;s understand the different components of Bitcask.
Bitcask components Bitcask is a straightforward model to understand.</description></item><item><title>WiscKey: Separating Keys from Values in SSD-Conscious Storage</title><link>/en/blog/wisckey_ssd_conscious_key_value_store/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>/en/blog/wisckey_ssd_conscious_key_value_store/</guid><description>LSM-tree (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device&amp;rsquo;s sequential and random performance characteristics.
This article summarises the WiscKey paper published in 2016.</description></item><item><title>Bloom filter</title><link>/en/blog/bloom_filter/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>/en/blog/bloom_filter/</guid><description>A Bloom filter is a probabilistic data structure1 used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either &amp;ldquo;possibly in the set&amp;rdquo; or &amp;ldquo;definitely not in the set&amp;rdquo;.
A bloom filter can have false positives, but false negatives are impossible.
Elements can only be added to the set, but not removed (though this can be addressed with the counting bloom filter variant).</description></item><item><title>Persistent memory - Introduction</title><link>/en/blog/persistent_memory/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>/en/blog/persistent_memory/</guid><description/></item></channel></rss>