<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on tech-lessons.in</title><link>/en/tags/c/</link><description>Recent content in C on tech-lessons.in</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 21 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/en/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Invoking C Code from Golang</title><link>/en/blog/invoking_c_from_go/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><guid>/en/blog/invoking_c_from_go/</guid><description>&lt;p>The article attempts to explore Golang&amp;rsquo;s &amp;ldquo;C&amp;rdquo; package which allows invoking C code from Golang. Before we get into the idea
of invoking C code from Golang, let&amp;rsquo;s see a use-case where this might be needed.&lt;/p>
&lt;h3 id="interfacing-with-an-existing-c-library">Interfacing with an existing C library&lt;/h3>
&lt;p>Let&amp;rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use
&lt;a href="https://github.com/pmem/pmdk" target="_blank" rel="noopener">pmdk - persistent memory development kit&lt;/a>
 which is written in C. This effectively means we want a way to bridge Golang and C code; invoke C code
from Golang.&lt;/p></description></item></channel></rss>