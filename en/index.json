[{"author":"Sarthak Makhija","categories":null,"contents":"Ensuring data consistency in the face of concurrent transactions is a critical challenge in database management. Traditional serializable isolation, while guaranteeing data integrity, often suffers from performance bottlenecks due to extensive locking. This article explores Serializable Snapshot Isolation (SSI) that promises the best of both worlds: strong data consistency without sacrificing performance. The article delves into the inner workings of SSI and explore its implementation for a Key/Value storage engine. I will refer to the research paper titled A critique of snapshot isolation .","date":"2024-03-22T00:00:00Z","permalink":"/en/blog/serializable_snapshot_isolation/","tags":["Golang","Transaction","Isolation","Serializable Snapshot Isolation","BadgerDb"],"title":"A guide to Serializable Snapshot Isolation in Key/Value storage engine"},{"author":"Sarthak Makhija","categories":null,"contents":"As Rust projects grow in size and complexity, the need for sophisticated error handling tools becomes ever more pressing. Traditional methods like panics and asserts, while useful, can be limited and cumbersome.\nLet\u0026rsquo;s build an assertions crate that offers elegant and powerful assertions, while simultaneously diving into the diverse landscape of Rust features.\nIntroduction Let\u0026rsquo;s define some requirements for our crate. The assertions crate should:\nOffer Fluent API: chain assertions for a natural and readable experience.","date":"2024-01-24T00:00:00Z","permalink":"/en/blog/diving_into_rust/","tags":["Rust","Assertions","Elegant-assertions","Clearcheck"],"title":"Diving into Rust by building an assertions crate"},{"author":"Sarthak Makhija","categories":null,"contents":"My Projects I love working on my projects in my free time.\nðŸ”¹ Clearcheck Write expressive and elegant assertions with ease!\nclearcheck is designed to make assertion statements in Rust as clear and concise as possible.\nIt allows chaining multiple assertions together for a fluent and intuitive syntax, leading to more self-documenting test cases.\nlet pass_phrase = \u0026#34;P@@sw0rd1 zebra alpha\u0026#34;; pass_phrase.should_not_be_empty() .should_have_at_least_length(10) .should_contain_all_characters(vec![\u0026#39;@\u0026#39;, \u0026#39; \u0026#39;]) .should_contain_a_digit() .should_not_contain_ignoring_case(\u0026#34;pass\u0026#34;) .should_not_contain_ignoring_case(\u0026#34;word\u0026#34;); ðŸ”¹ Blast blast is a load generator for TCP servers, especially if such servers maintain persistent connections.","date":"2024-01-20T00:00:00Z","permalink":"/en/page/projects/","tags":null,"title":"My projects"},{"author":"Sarthak Makhija","categories":null,"contents":"I had been working on building an in-memory LFU cache (least frequently used cache) and now that it is done, I thought of writing about the building blocks of an LFU cache. This article shares the building blocks of an LFU cache along with the ideas from two research papers: TinyLFU and BP-Wrapper CacheD is the name of my cache, and it is inspired by Ristretto . I know CacheD is a very creative name.","date":"2023-05-26T00:00:00Z","permalink":"/en/blog/designing_lfu_cache/","tags":["Cache","TinyLFU","CacheD"],"title":"Designing an in-memory LFU cache"},{"author":"Sarthak Makhija","categories":null,"contents":"Bitcask is an embeddable key/value storage engine that is defined as a \u0026ldquo;Log-Structured Hash Table\u0026rdquo; in the paper that introduced it. Bitcask follows a simple model: all the key/value pairs are written to append-only files, and an in-memory data structure contains a mapping between each key and the position of the value in the data file.\nLet\u0026rsquo;s understand the different components of Bitcask.\nBitcask components Bitcask is a straightforward model to understand.","date":"2023-05-04T00:00:00Z","permalink":"/en/blog/bitcask/","tags":["Bitcask","Storage engine","Log Structured"],"title":"Bitcask - A Log-Structured Hash Table"},{"author":"Sarthak Makhija","categories":null,"contents":"LSM-tree (Log structured merge tree) is a data structure typically used for write-heavy workloads. LSM-tree optimizes the write path by performing sequential writes to disk. WiscKey is a persistent LSM-tree-based key-value store that separates keys from values to minimize read and write amplification. The design of WiscKey is highly SSD optimized, leveraging both the device\u0026rsquo;s sequential and random performance characteristics.\nThis article summarises the WiscKey paper published in 2016.","date":"2023-03-10T00:00:00Z","permalink":"/en/blog/wisckey_ssd_conscious_key_value_store/","tags":["Storage engine","LSM-tree","WiscKey","SSD-conscious","BadgerDb"],"title":"WiscKey: Separating Keys from Values in SSD-Conscious Storage"},{"author":"Sarthak Makhija","categories":null,"contents":"A Bloom filter is a probabilistic data structure1 used to test whether an element is a set member. A bloom filter can query against large amounts of data and return either \u0026ldquo;possibly in the set\u0026rdquo; or \u0026ldquo;definitely not in the set\u0026rdquo;.\nA bloom filter can have false positives, but false negatives are impossible.\nElements can only be added to the set, but not removed (though this can be addressed with the counting bloom filter variant).","date":"2023-02-25T00:00:00Z","permalink":"/en/blog/bloom_filter/","tags":["Bloom filter","Storage engine","Probabilistic data structure"],"title":"Bloom filter"},{"author":"Sarthak Makhija","categories":null,"contents":" I am Sarthak Makhija, and I am an application developer at ThoughtWorks. I had worked with Citigroup and TCS before I joined ThoughtWorks.\nI am currently leading a team that is developing a strongly consistent distributed key/value storage engine with support for rich queries.\nThe technical ideas of our distributed key/value storage engine include:\ngolang as the programming language etcd as the metadata store badger as the key/value storage engine raft (/multi-raft) as the consensus algorithm and two-phase commit with serial isolation level Let\u0026rsquo;s connect ","date":"2023-02-24T00:00:00Z","permalink":"/en/page/about/","tags":null,"title":"About Me"},{"author":"Sarthak Makhija","categories":null,"contents":"Automated tests are an essential part of every piece of code that we write. The benefits of these tests are so compelling that it does not even make sense to think about writing code without tests or writing code today and adding tests later. Despite the benefits, we still see code without tests, we still see ideas like \u0026ldquo;writing code today and adding tests when the delivery pressure reduces\u0026rdquo; floating around.","date":"2023-02-24T00:00:00Z","permalink":"/en/blog/code_without_tests/","tags":["Agile","Testing","Refactoring"],"title":"Code without automated tests? Are we serious?"},{"author":"Sarthak Makhija","categories":null,"contents":"Count-min sketch (CM sketch) is a probabilistic data structure1 used to estimate the frequency of events in a data stream.\nIt relies on hash functions to map events to frequencies, but unlike a hash table, it uses only sublinear space at the expense of over-counting some events due to hash collisions. The countâ€“min sketch was invented in 2003 by Graham Cormode and S. Muthu Muthukrishnan.\nUnderstanding Count-min Sketch Let\u0026rsquo;s say we want to build a solution to count the frequency of elements in a data stream.","date":"2023-02-24T00:00:00Z","permalink":"/en/blog/count_min_sketch/","tags":["Count-min sketch","Probabilistic data structure"],"title":"Count-min sketch"},{"author":"Sarthak Makhija","categories":null,"contents":"","date":"2022-04-28T00:00:00Z","permalink":"/en/blog/persistent_memory/","tags":["Persistent memory","Storage engine"],"title":"Persistent memory - Introduction"},{"author":"Sarthak Makhija","categories":null,"contents":"The article attempts to explore Golang\u0026rsquo;s \u0026ldquo;C\u0026rdquo; package which allows invoking C code from Golang. Before we get into the idea of invoking C code from Golang, let\u0026rsquo;s see a use-case where this might be needed.\nInterfacing with an existing C library Let\u0026rsquo;s consider that we wish to develop a storage engine for pmem (persistent memory) in Golang. In order to develop this, we might want to use pmdk - persistent memory development kit which is written in C.","date":"2021-12-21T00:00:00Z","permalink":"/en/blog/invoking_c_from_go/","tags":["Golang","C","CGO"],"title":"Invoking C Code from Golang"},{"author":"Sarthak Makhija","categories":null,"contents":"Java code is compiled into an intermediate representation called \"bytecode\". It is this bytecode which gets executed by JVM and is later converted into machine specific instructions by JIT compiler. With this article, we attempt to dive into bytecode and understand the internals of various bytecode operations.\nLet\u0026rsquo;s get an understanding of some terms before we start to dive in.\nTerminology Bytecode\nAn intermediate representation of Java code which JVM understands.","date":"2021-04-04T00:00:00Z","permalink":"/en/blog/diving_into_java_bytecode/","tags":["Java","JVM","Bytecode"],"title":"Diving into Java Bytecode"},{"author":"Sarthak Makhija","categories":null,"contents":"AWS Lambda is a serverless compute service and after having worked with it for some time, I felt it is a good time for me to share my learning and experiences. I have been thinking of writing an article in a \u0026ldquo;Virtual Podcast format\u0026rdquo; and felt this could be the one.\nWelcome all to this article named AWS Lambda - A Virtual Podcast and let me introduce our guests Mr.","date":"2020-04-19T00:00:00Z","permalink":"/en/blog/aws_lambda_a_virtual_podcast/","tags":["AWS Lambda","Serverless"],"title":"AWS Lambda - A Virtual Podcast"},{"author":"Sarthak Makhija","categories":null,"contents":"We have come a long way in our Serverless journey . This journey which started with building a serverless application has finally come to a stage where we can see all our hard work in action. We will be deploying our application in this article.\nWe will be using AWS CDK to deploy our application. Before we start using CDK, let\u0026rsquo;s quickly look at what is CDK -\nThe AWS Cloud Development Kit (AWS CDK) is an open source software development framework to model and provision your cloud application resources using familiar programming languages.","date":"2020-03-18T00:00:00Z","permalink":"/en/blog/concluding_serverless_journey/","tags":["AWS Lambda","Serverless","CDK"],"title":"Concluding Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"It is time to test our Serverless journey which started with a web application that involved an AWS lambda, an API Gateway and DynamoDB.\nWe had some unit tests for our controller, service and request objects. But, these tests don\u0026rsquo;t give us the kind of confidence we need to deploy our application. At this stage we don\u0026rsquo;t even know if the query that is written in the repository is going to work properly or not, forget about releasing the application.","date":"2020-03-14T00:00:00Z","permalink":"/en/blog/testing_serverless_journey/","tags":["AWS Lambda","Serverless","Localstack"],"title":"Testing Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"Serverless is a paradigm that lays its foundations on the fact that \u0026ldquo;We don\u0026rsquo;t have to provision and manage servers\u0026rdquo;. This article series explores various aspects involved in a serverless application lifecycle including - development, testing and deployment. Our serverless journey which starts from building to deploying an application will be using multiple serverless components including AWS Lambda, AWS API Gateway, AWS DynamoDB, LocalStack and AWS CDK.\nLet us deep dive step by step into what it takes to build a Serverless application.","date":"2020-03-10T00:00:00Z","permalink":"/en/blog/beginning_serverless_journey/","tags":["AWS Lambda","Serverless"],"title":"Beginning Serverless Journey"},{"author":"Sarthak Makhija","categories":null,"contents":"We often have a lot to share with people, this could be our learnings, our opinions and our experiences. There are times when we feel the need to get our ideas validated or get feedback from people. These are definitely some of the reasons to invest in blogging and connect with community.\nLet\u0026rsquo;s see some reasons for investing in writing blogs. Help people learn from your learning journey There are times when we often feel \u0026ldquo;it would have been great if someone had written an article to explain a concept\u0026rdquo;, start writing if you have had this feeling.","date":"2019-06-07T00:00:00Z","permalink":"/en/blog/invest_in_blogging/","tags":["Blogging"],"title":"Invest In Blogging"},{"author":"Sarthak Makhija","categories":null,"contents":"A domain-specific language (DSL) is a computer language specialized to a particular application domain. This is in contrast to a general-purpose language (GPL), which is broadly applicable across domains. There are a wide variety of DSLs, ranging from widely used languages for common domains, such as HTML for web pages, down to languages used by only one or a few pieces of software.\nKotlin DSL Kotlin provides first class support for DSL which allows us to express domain-specific operations much more concisely than an equivalent piece of code in a general-purpose language.","date":"2018-05-27T00:00:00Z","permalink":"/en/blog/kotlin_dsl/","tags":["Domain specific language","DSL","Kotlin"],"title":"Kotlin DSL"},{"author":"Sarthak Makhija","categories":null,"contents":"There is no doubt that Java has enjoyed a superior position when it comes to programming languages and is considered as one of the most important languages for development. However, there have been a number of languages developed on top of the JVM, like Kotlin Kotlin is a statically typed programming language for modern multi-platform applications. While I have been a Java developer for quite a long while, working on the data-anonymization project made me feel that there are things that Java should consider importing from Kotlin.","date":"2018-04-20T00:00:00Z","permalink":"/en/blog/kotlin_wishlist_for_java/","tags":["Kotlin","Java"],"title":"Kotlin Wishlist for Java"},{"author":"Sarthak Makhija","categories":null,"contents":"This article is in continuation with the previous article where we defined some key aspects of Legacy code. In this article we will learn to deal with Legacy code. Before we begin with an example, letâ€™s take a moment to understand Broken Window Theory.\nBroken Window Theory An academic theory proposed by James Q. Wilson and George Kelling in 1982 that used broken windows as a metaphor for disorder within neighbourhoods.","date":"2018-04-12T00:00:00Z","permalink":"/en/blog/lets_deal_with_legacy_code/","tags":["Legacy code","Broken Window Theory","Refactoring"],"title":"Letâ€™s deal with Legacy code"},{"author":"Sarthak Makhija","categories":null,"contents":"\u0026ldquo;I have been having sleepless nights trying to add features in the code that we acquired from other company. I am dealing with the purest form of Legacy code.\u0026rdquo;\n\u0026ldquo;I am having a real hard time dealing with tangled, unstructured code that I have to work with, but I donâ€™t understand a bit. Legacy code\u0026rdquo;\nLegacy code is a term which probably has a lot of different definitions like: code acquired from someone else, code written by someone else, code that is hard to understand or code written in outdated technologies.","date":"2018-04-10T00:00:00Z","permalink":"/en/blog/lets_define_legacy_code/","tags":["Legacy code","Boy Scout Rule"],"title":"Let's define Legacy code"},{"author":"Sarthak Makhija","categories":null,"contents":"Flips is an implementation of the Feature Toggles pattern for Java and Spring (Spring Core / Spring MVC/ Spring Boot) based application. Feature Toggle is a powerful technique that allows teams to modify the system behavior and deliver new functionality to end-users rapidly and safely.\nWhy Another Library for Feature Toggles? The idea behind Flips is to let the clients implement toggles with minimum configuration and coding.\nThe main motivations behind implementing this library were:","date":"2017-10-07T00:00:00Z","permalink":"/en/blog/flips_feature_flipping_for_java/","tags":["Flips","Feature toggles","Spring","Spring MVC"],"title":"Flips: Feature Flipping for Java"}]